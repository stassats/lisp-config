#!/usr/local/bin/gosh
;;; -*- Mode: Scheme -*-

(use file.util)
(use gauche.process)
(use srfi-1)
(use srfi-13)
(use util.match)

(define (main args)
  (load "~/lisp/bin/data")
  (match (map string->symbol (cdr args))
         (('g . arguments)
          (act get arguments))
         (('u . arguments)
          (act update arguments))
         (('log . arguments)
          (act history-log arguments))
         (('remove . arguments)
          (if (> (length arguments) 0)
              (act remove arguments)
              (error "Remove requires one or more arguments.")))
         (('cd . arguments)
          (act directory arguments))
         (('list)
          (list-all))
         ((action . _)
          (error
           (format "There is no such action: ~s." action)))))

(define (act action arguments)
  (define (act-1 config)
    (match-let1 (name method url path asd)
                config
                (display (format "Acting on ~a:~%" name) (standard-error-port))
                (action method url path asd)))
  (if (null? arguments)
      (for-each act-1 *projects*)
      (for-each
       (lambda (name)
         (act-1 (assq name *projects*)))
       arguments)))

(define *update*
  '((git pull)
    (darcs pull -a)
    (cvs -q update)
    (svn update)
    (hg pull -u)
    (bzr update)))

(define (run command)
  (run-process command :wait #t))

(define (update method url path asds)
  (cond ((file-exists? path)
         (current-directory path)
         (if (equal? method 'wget)
             (update-wget method url path asds)
             (run (assq method *update*))))
        (else
         (print (format "Isn't installed")))))

(define *get*
  '((git clone)
    (darcs get)
    (svn co)
    (hg clone)
    (bzr checkout)))

(define (get method url path asds)
  (define (link-asd path asds)
    (for-each
     (lambda (asd)
       (let ((existing (build-path path asd))
             (new (build-path *asdf-registry* (sys-basename asd))))
         (when (and (file-exists? existing) (not (file-exists? new)))
           (sys-symlink existing new))))
     asds))
  (cond ((file-exists? path)
         (print (format "Already installed")))
        (else
         (run (get-command method url path))
         (link-asd path asds))))

(define (get-command method url path)
  (case method
    ((cvs) (cvs url path))
    ((wget) (wget url path))
    (else (append (assq method *get*) (list url path)))))

(define (cvs url path)
  ;; ugly cvs...
  (receive (parent name _) (decompose-path path)
    (current-directory parent)
    (match-let1 (root module) (string-split url " ")
                `(cvs -q -z3 -d ,root co -d ,name ,module))))

(define (wget url path)
  (define (compression-type)
    (let ((extension (path-extension url)))
      (cond ((string-suffix? "bz2" url) "j")
            ((string-suffix? "gz" url) "z"))))
  (make-directory* path)
  (current-directory path)
  (process-output->string
   (format "wget -O - \"~a\" | tar --strip-components 1 -x~a"
           url (compression-type)))
  '(true))

(define (update-wget method url path asds)
  ;;(remove #f #f path asds)
  ;; (get method url path asds)
  )

(define (remove method url path asds)
  (delete-files (filter file-exists? (cons path asds))))

(define (directory method url path asds)
  (print (format "cd ~a" path)))

(define (list-all)
  (for-each (lambda (project) (print (car project)))
   *projects*))

(define *log*
  '((git "git log")
    (darcs "darcs changes | less")
    (svn "svn log | less")
    (hg "hg log | less")))

(define (history-log method url path asds)
  (cond ((file-exists? path)
         (current-directory path)
         (sys-system (cadr (assq method *log*))))
        (else
         (print (format "Isn't installed")))))
